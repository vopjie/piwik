<?php
/**
 * Piwik - free/libre analytics platform
 *
 * @link    http://piwik.org
 * @license http://www.gnu.org/licenses/gpl-3.0.html GPL v3 or later
 *
 */
namespace Piwik\Plugins\Goals;

use Piwik\Common;
use Piwik\Config;
use Piwik\Date;
use Piwik\Db;
use Piwik\Metrics\Formatter;
use Piwik\Piwik;
use Piwik\Plugins\CustomVariables\CustomVariables;
use Piwik\Plugins\Live\VisitorDetailsAbstract;
use Piwik\Site;
use Piwik\Tracker\Action;
use Piwik\Tracker\PageUrl;

class VisitorDetails extends VisitorDetailsAbstract
{
    const EVENT_VALUE_PRECISION = 3;

    public function setDetails($details)
    {
        $this->lastVisitId = $this->lastGoalResult = null;
        parent::setDetails($details); // TODO: Change the autogenerated stub
    }

    public function extendVisitorDetails(&$visitor)
    {
        $goalConversionDetails = $this->queryGoalConversionsForVisit($visitor['idVisit']);

        $visitor['goalConversions'] = count($goalConversionDetails);
    }

    public function provideActions(&$actions, $visitorDetails)
    {
        $goalConversionDetails = $this->queryGoalConversionsForVisit($visitorDetails['idVisit']);
        $actions = array_merge($actions, $goalConversionDetails);
    }

    protected $lastVisitId = null;
    protected $lastGoalResult = null;

    /**
     * @param $idVisit
     * @return array
     * @throws \Exception
     */
    protected function queryGoalConversionsForVisit($idVisit)
    {
        if ($this->lastVisitId == $idVisit) {
            return $this->lastGoalResult;
        }

        $this->lastVisitId = $idVisit;
        $limit = (int)Config::getInstance()->General['visitor_log_maximum_actions_per_visit'];
        $sql = "
				SELECT
						'goal' as type,
						goal.name as goalName,
						goal.idgoal as goalId,
						log_conversion.revenue as revenue,
						log_conversion.idlink_va,
						log_conversion.idlink_va as goalPageId,
						log_conversion.server_time as serverTimePretty,
						log_conversion.url as url
				FROM " . Common::prefixTable('log_conversion') . " AS log_conversion
				LEFT JOIN " . Common::prefixTable('goal') . " AS goal
					ON (goal.idsite = log_conversion.idsite
						AND
						goal.idgoal = log_conversion.idgoal)
					AND goal.deleted = 0
				WHERE log_conversion.idvisit = ?
					AND log_conversion.idgoal > 0
                ORDER BY server_time ASC
				LIMIT 0, $limit
			";
        $this->lastGoalResult = Db::fetchAll($sql, array($idVisit));
        return $this->lastGoalResult;
    }
}